// Ïï°ÏÖò ÌÉÄÏûÖ, Ïï°ÏÖò ÏÉùÏÑ±Ìï®Ïàò, Ï¥àÍ∏∞Í∞í, Î¶¨ÎìÄÏÑú(reducer)
// ÌîÑÎ°úÎØ∏Ïä§Í∞Ä ÏãúÏûë, ÏÑ±Í≥µ, Ïã§Ìå® ÌñàÏùÑ Îïå Îã§Î•∏ Ïï°ÏÖòÏùÑ ÎîîÏä§Ìå®Ïπò Ìï¥ÏïºÌï®
// Í∞Å ÌîÑÎ°úÎØ∏Ïä§ÎßàÎã§ thunk Ìï®ÏàòÎ•º ÎßåÎì§Ïñ¥ Ï£ºÏñ¥Ïïº Ìï®
// Î¶¨ÎìÄÏÑúÏóêÏÑú Ïï°ÏÖòÏóê Îî∞Îùº Î°úÎî©Ï§ë, Í≤∞Í≥º, ÏóêÎü¨ ÏÉÅÌÉúÎ•º Î≥ÄÍ≤Ω // Async Hook Í≥º ÎπÑÏä∑ÌïòÍ≤å Í¥ÄÎ¶¨

// asÎäî " postAPI " Ïù¥Îü∞ Ïù¥Î¶ÑÏúºÎ°ú Î∞õÍ≤†Îã§ ~
// API/posts ÏïàÏùò Ìï®Ïàò Î™®Îëê Î∂àÎü¨Ïò§Í∏∞
import * as postAPI from '../API/posts';
// thunk Ìï®Ïàò // ‚≠ê Î¶¨Ìå©ÌÑ∞ÎßÅ(refactoring) ‚≠ê
import { createPromiseThunk, reducerUtils } from '../lib/asyncUtils';

// üîª Ï¥àÍ∏∞Í∞í
const initialState = {
    // posts : {
    //     loading : false,
    //     data : null,
    //     error : null
    // },
    // post : {
    //     loading : false,
    //     data : null,
    //     error : null
    // }
    // ‚≠ê Î∞òÎ≥µÎêòÎäî Ï¥àÍ∏∞Í∞í {}Î•º initialÎ•º Ïã§ÌñâÌïòÏó¨ Î¶¨ÌÑ¥ Î∞õÏùå
    posts : reducerUtils.initial(),
    post : reducerUtils.initial(),
}

// üîª Ïï°ÏÖò ÌÉÄÏûÖ ÏßÄÏ†ï

// Ìè¨Ïä§Ìä∏Î•º Ïó¨Îü¨Í∞ú Ï°∞ÌöåÌïòÍ∏∞
const GET_POSTS = "GET_POSTS"; // ÏöîÏ≤≠ ÏãúÏûë
const GET_POSTS_SUCCESS = "GET_POSTS_SUCCESS"; // ÏöîÏ≤≠ ÏÑ±Í≥µ
const GET_POSTS_ERROR = "GET_POSTS_ERROR"; // ÏöîÏ≤≠ Ïã§Ìå®

// Ìè¨Ïä§Ìä∏ ÌïòÎÇò Ï°∞ÌöåÌïòÍ∏∞
const GET_POST = "GET_POST"; // ÏöîÏ≤≠ ÏãúÏûë
const GET_POST_SUCCESS = "GET_POST_SUCCESS"; // ÏöîÏ≤≠ ÏÑ±Í≥µ
const GET_POST_ERROR = "GET_POST_ERROR"; // ÏöîÏ≤≠ Ïã§Ìå®

// üîª thunk Ìï®Ïàò, getPosts Ìò∏Ï∂ú ÎêòÎ©¥ dispatch

// Ïó¨Îü¨Í∞ú Ï°∞ÌöåÌïòÎäî Ìï®Ïàò
// export const getPosts = () => async dispatch => {
//     dispatch({ type : GET_POSTS }) // ÏöîÏ≤≠ ÏãúÏûë
//     try{
//         const posts = await postAPI.getPosts(); // APIÌò∏Ï∂ú
//         dispatch({ type : GET_POSTS_SUCCESS, posts }); // ÏöîÏ≤≠ ÏÑ±Í≥µ , posts Ï†ÑÎã¨
//         // dispatch({ type : GET_POSTS_SUCCESS, posts : posts });
//     }
//     catch(e) {
//         dispatch({ type : GET_POSTS_ERROR, error : e }) // ÏöîÏ≤≠ Ïã§Ìå® , error Ï†ÑÎã¨
//     }
// }
// ‚≠ê
export const getPosts = createPromiseThunk(GET_POSTS, postAPI.getPosts);

// ÌïòÎÇòÎßå Ï°∞ÌöåÌïòÎäî Ìï®Ïàò
                    // id Î∞õÍ∏∞
// export const getPost = id => async dispatch => {
//     dispatch({ type : GET_POST }) // ÏöîÏ≤≠ ÏãúÏûë
//     try{
//         const post = await postAPI.getPostsById(id); // APIÌò∏Ï∂ú
//         dispatch({ type : GET_POST_SUCCESS, post }); // ÏöîÏ≤≠ ÏÑ±Í≥µ , posts Ï†ÑÎã¨
//         // dispatch({ type : GET_POSTS_SUCCESS, posts : posts });
//     }
//     catch(e) {
//         dispatch({ type : GET_POST_ERROR, error : e }) // ÏöîÏ≤≠ Ïã§Ìå® , error Ï†ÑÎã¨
//     }
// }
// ‚≠ê
export const getPost =createPromiseThunk(GET_POST, postAPI.getPostsById);

// üîª Î¶¨ÎìÄÏÑú ÎßåÎì§Í∏∞
export default function posts(state = initialState, action) {
    switch(action.type) {
        case GET_POSTS :
            return {
                ...state,
                posts : reducerUtils.loading()
                // posts : {
                //     loading : true,
                //     data : null,
                //     error : null
                // }
            }
        case GET_POSTS_SUCCESS :
            return {
                ...state,
                posts : reducerUtils.success(action.payload)
                // posts : {
                //     loading : false,
                //     data : action.posts,
                //     error : null
                // }
            }
        case GET_POSTS_ERROR :
            return {
                ...state,
                posts : reducerUtils.error(action.error)
                // posts : {
                //     loading : false,
                //     data : null,
                //     error : action.error
                // }
            }

        case GET_POST :
            return {
                ...state,
                post : reducerUtils.loading()
                // post : {
                //     loading : true,
                //     data : null,
                //     error : null
                // }
            }
        case GET_POST_SUCCESS :
            return {
                ...state,
                post : reducerUtils.success(action.payload)
                // post : {
                //     loading : false,
                //     data : action.post,
                //     error : null
                // }
            }
        case GET_POST_ERROR :
            return {
                ...state,
                post : reducerUtils.error(action.error)
                // post : {
                //     loading : false,
                //     data : null,
                //     error : action.error
                // }
            }
        
        default :
        return state;
    }
}
